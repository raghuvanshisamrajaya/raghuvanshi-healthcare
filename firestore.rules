rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check user role
    function hasRole(role) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return hasRole('admin');
    }
    
    // Helper function to check if user is doctor
    function isDoctor() {
      return hasRole('doctor');
    }
    
    // Helper function to check if user is merchant
    function isMerchant() {
      return hasRole('merchant');
    }
    
    // Users collection - users can read/write their own data, admins can read all
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Carts collection - users can only access their own cart
    match /carts/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // Orders collection - users can read their own orders, admins and merchants can read all
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      isAdmin() || 
                      isMerchant());
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || isMerchant();
      allow delete: if isAdmin();
    }
    
    // Products collection - public read, admins and merchants can write
    match /products/{productId} {
      allow read: if true; // Public read access
      allow create, update: if isAdmin() || isMerchant();
      allow delete: if isAdmin();
    }
    
    // Services collection - public read, admins and doctors can write
    match /services/{serviceId} {
      allow read: if true; // Public read access
      allow create, update: if isAdmin() || isDoctor();
      allow delete: if isAdmin();
    }

    // Promos collection - public read for active promos, only admins can write
    match /promos/{promoId} {
      allow read: if true; // Public read access for checking promo codes
      allow create, update, delete: if isAdmin(); // Only admins can manage promos
    }

    // Bookings collection - new medical appointment bookings system
    match /bookings/{bookingId} {
      allow read: if true; // Allow public read for admin dashboard
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.doctorAssigned == request.auth.uid ||
                        isAdmin() || 
                        isDoctor());
      allow delete: if isAdmin();
      
      // Allow list operations for admin dashboard
      allow list: if isAdmin();
    }

    // Appointments collection - users can read their own, doctors can read assigned ones, admins can read all
    match /appointments/{appointmentId} {
      allow read: if true; // Allow public read for admin dashboard
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        resource.data.doctorId == request.auth.uid ||
                        resource.data.doctorAssigned == request.auth.uid ||
                        isAdmin());
      allow delete: if isAdmin();
      
      // Allow list operations for admin dashboard
      allow list: if isAdmin();
    }
    
    // Contact messages - anyone can create, only admins can read/update/delete
    match /contacts/{contactId} {
      allow create: if true; // Anyone can submit contact form
      allow read, update, delete: if isAdmin();
    }
    
    // Reviews collection - authenticated users can create, anyone can read, owners and admins can update/delete
    match /reviews/{reviewId} {
      allow read: if true; // Public read access
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                               (resource.data.userId == request.auth.uid || 
                                isAdmin());
    }
    
    // Notifications collection - users can read their own, admins can read all
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || 
                      isAdmin());
      allow create: if isAdmin() || isDoctor();
      allow update: if isAuthenticated() && 
                       (resource.data.userId == request.auth.uid || 
                        isAdmin());
      allow delete: if isAdmin();
    }
    
    // Analytics collection - only admins can access
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Settings collection - only admins can access
    match /settings/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Inventory collection - admins and merchants can access
    match /inventory/{document=**} {
      allow read, write: if isAdmin() || isMerchant();
    }
    
    // Reports collection - admins and relevant role holders can access
    match /reports/{reportId} {
      allow read: if isAdmin() || isDoctor() || isMerchant();
      allow create, update, delete: if isAdmin();
    }
  }
}
